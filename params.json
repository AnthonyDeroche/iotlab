{"name":"IoTLab","tagline":"Internet of Things architecture including an embedded application in sky motes, a gateway, and a web application in JEE","body":"### Welcome to the IoTLab project page.\r\n\r\nThis project is the outcome of one school project and three internships at INRIA Nancy - Grand Est in France. The architecture is composed of an embedded application in sky motes, a gateway in charge of relaying collected data to the server application. The different steps to set up the server our application are described thereafter. As well as we did, you might find useful to add HTTPS or a proxy on server side. These optional steps are described at the end of the page.\r\n\r\n### Summary : \r\n* <a href=\"#install-java-ee-platform-with-glassfish-4\">Install Java EE platform with Glassfish 4</a>\r\n* <a href=\"#deploy-our-application\">Deploy our application</a>\r\n* <a href=\"#set-up-a-certificate-with-https-in-glassfish\">Set up a certificate with HTTPS in Glassfish</a>\r\n* <a href=\"#set-up-a-proxy-by-using-apache-as-front-end-server\">Set up a proxy by using Apache as front-end server</a>\r\n* <a href=\"#contributors-and-supervisors\">Contributors</a>\r\n* <a href=\"#contact\">Contact</a>\r\n\r\nTo clone the repository : \r\n```\r\n$ cd your_folder/\r\n$ git clone https://github.com/AnthonyDeroche/iotlab.git\r\n\r\n```\r\n<h2 id=\"install\">Install Java EE platform with Glassfish 4</h2>\r\n\r\nOur application requires Java EE 7 and that's why you need <a href=\"http://www.oracle.com/technetwork/java/javase/downloads/index.html\" target=\"_blank\">JDK 7 </a>(or above). <br />\r\nGlassfish 4 with Java EE 7 environnement can be downloaded at this link : <a href=\"https://glassfish.java.net/download.html\" target=\"_blank\">Glassfish 4</a>.\r\nOnce you have unzipped the glassfish folder, you can start the server by running :\r\n```\r\n./bin/asadmin start-domain\r\n```\r\n\r\n\r\nIf the server is working, you should be able to reach the administration page at <a href=\"http://localhost:4848/\" target=\"_blank\">http://localhost:4848/</a>, and the default page at <a href=\"http://localhost:8080/\" target=\"_blank\">http://localhost:8080/</a>.\r\n\r\nYou should change the admin password by entering this command : \r\n```\r\n./bin/asadmin --user admin change-admin-password\r\n```\r\n\r\nIf the server is on a remote machine, you may need to enable a remote access : \r\n```\r\n./asadmin enable-secure-admin\r\n./asadmin restart-domain\r\n```\r\n\r\n<h2 id=\"deploy\">Deploy our application</h2>\r\n\r\nWe use MySQL as DBMS. So if you don't have MySQL installed, open a terminal and enter the following command : \r\n```\r\nsudo apt-get install mysql-server\r\n\r\n```\r\nTo manage the database, we advise you to use phpmyadmin : \r\n```\r\nsudo apt-get install apache2 php5 mysql-server phpmyadmin\r\n\r\n```\r\nThe next step is to configure Glassfish to connect to the MySQL database. In our project, we use a connection pool named BoneCP. We advise you to create a specific user and database. That can be done with phpmyadmin. We provide you a resource file that can be directly imported in Glassfish via the administration interface or in command line. This file is located in server/lib/bonecp-datasource.xml. You have to change several lines to match with your user and database name.\r\n```\r\n<property name=\"jdbcUrl\" value=\"jdbc:mysql://localhost:3306/iotlab\"/>\r\n<property name=\"user\" value=\"admin\"/>\r\n<property name=\"password\" value=\"admin\"/>\r\n```\r\nTo import the file, copy it, go in the glassfish folder and then the bin folder and paste the file. Enter the following command : \r\n```\r\n./asadmin add-resources bonecp-datasource.xml\r\n```\r\n\r\nThe next step is to provide to Glassfish the libraries used by the application. Copy all jar files from the **server/lib/** folder to **glassfish4/glassfish/domains/domain1/lib/ext/**.\r\n\r\nBy now, the server should be ready to deploy our application. You need to import the war file which is located in your git repository at server/bin/iotlab.war. This can be done via the administration interface or by entering the following command (in the bin folder) : \r\n```\r\n./asadmin deploy path_to/iotlab.war\r\n```\r\nAll should be working fine. \r\n\r\n<h2 id=\"https\">Set up a certificate with HTTPS in Glassfish</h2>\r\n\r\nIn this section, I suppose you already have a certificate (.crt) signed by an authority or self-signed and a private key (.key).\r\n\r\nIt's strongly advised to change your master password, because it's used to read the key store managed by Glassfish. The default password is changeit. \r\n```\r\n./asadmin change-master-password\r\n```\r\n\r\nFirst of all, you need to convert those files to a PKCS#12 (PFX) key store and precise an alias. This alias will be used by Glassfish. You will be asked to enter an export password.\r\n```\r\nopenssl pkcs12 -export -out certificate.p12 -inkey server.key -in server.crt -certfile CACert.pem -name myAlias\r\n```\r\nIn this example, CACert.pem is the name of the root certificate that was returned by the certificate authority.\r\n\r\nThe second step is to add the PKCS#12 key store to the existing key store in Glassfish located in glassfish4/glassfish/domains/domain1/config/.\r\n```\r\nkeytool -v -importkeystore -srckeystore certificate.p12 -srcstoretype PKCS12 -srcalias myAlias -destkeystore keystore.jks -deststoretype JKS -destalias myAlias\r\n```\r\nYou can check out the content of the keystore by entering this following command : \r\n```\r\nkeytool -list -keystore keystore.jks\r\n```\r\nIn glassfish, the default http listener configured to use TLS is http-listener-2 and the default port used is 8181. You need to go in admin interface, browse to Configuartions/server-config/HTTP Service/Http Listeners/http-listener-2/ and the SSL tab. The Certificate NickName must be the alias you chose in your JKS file.\r\n\r\nYou just need to restart the domain and you're normally done.\r\n```\r\n./asadmin restart-domain\r\n```\r\n\r\nCheck it at <a href=\"https://localhost:8181/\" target=\"_blank\">https://localhost:8181/</a>\r\n\r\nFinally, on the computer where the gateway is executed, it can be required to add the certificate as trusted certificate especially in case of self-signed certificate. You need to convert it in PEM file. Well-configured, it allows the gateway to connect to the server using TLS and prevents java from printing out an error due to unknown or untrusted certificate.\r\n```\r\nkeytool -import -alias myAlias -file cert.pem -keystore /etc/ssl/certs/java/cacerts\r\n```\r\ncert.pem can be your self-signed certificate (converted to PEM file) or the root certificate of an authority.\r\n\r\n<h2 id=\"proxy\">Set up a proxy by using Apache as front-end server</h2>\r\n\r\n<h2 id=\"contributors\">Contributors and Supervisors</h2>\r\n* Anthony Deroche (@AnthonyDeroche), TELECOM Nancy\r\n* Thierry Duhal, TELECOM Nancy\r\n* Arthur Garnier, IUT Nancy Charlemagne\r\n* Thibault Cholez, Associate Professor, INRIA\r\n* Emmanuel Nataf, Associate Professor, INRIA\r\n\r\n<h2 id=\"contact\">Contact</h2>\r\n* anthony.deroche@telecomnancy.eu\r\n* thierry.duhal@telecomnancy.eu\r\n* arthur.garnier1@etu.univ-lorraine.fr\r\n* thibault.cholez@inria.fr\r\n* emmanuel.nataf@inria.fr\r\n\r\n### Links\r\n* <a href=\"http://www.telecomnancy.eu/\" target=\"_blank\">http://www.telecomnancy.eu/</a>\r\n* <a href=\"http://www.inria.fr/\" target=\"_blank\">http://www.inria.fr/</a>\r\n* <a href=\"http://www.loria.fr/\" target=\"_blank\">http://www.loria.fr/</a>\r\n* <a href=\"http://iut-charlemagne.univ-lorraine.fr/\" target=\"_blank\">http://iut-charlemagne.univ-lorraine.fr/</a>","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}